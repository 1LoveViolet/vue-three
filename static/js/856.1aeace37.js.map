{"version":3,"file":"static/js/856.1aeace37.js","mappings":"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","sources":["webpack://vue-three/./src/views/three2/index.vue","webpack://vue-three/src/views/three2/index.vue","webpack://vue-three/./src/views/three2/index.vue?c327","webpack://vue-three/./src/views/three2/index.vue?917d"],"sourcesContent":["var render = function render(){var _vm=this,_c=_vm._self._c;return _c('div',[_c('canvas',{ref:\"three_container\",attrs:{\"id\":\"three\"}})])\n}\nvar staticRenderFns = []\n\nexport { render, staticRenderFns }","<template>\r\n  <div>\r\n    <canvas id=\"three\" ref=\"three_container\"></canvas>\r\n  </div>\r\n</template>\r\n      \r\n      <script>\r\nimport { gsap } from \"gsap\";\r\n// 现在浏览器支持ES6语法，自然包括import方式引入js文件\r\nimport * as THREE from \"three\";\r\nimport { GLTFLoader } from \"three/addons/loaders/GLTFLoader.js\";\r\nimport { FontLoader } from \"three/addons/loaders/FontLoader.js\";\r\nimport { TextGeometry } from \"three/examples/jsm/geometries/TextGeometry.js\";\r\nimport { OrbitControls } from \"three/examples/jsm/controls/OrbitControls\";\r\nimport Stats from \"three/examples/jsm/libs/stats.module.js\";\r\nimport * as d3 from \"d3\";\r\nimport axios from \"network/axios\";\r\nexport default {\r\n  data() {\r\n    return {\r\n      renderer: null,\r\n      scene: null,\r\n      camera: null,\r\n      controls: null,\r\n      v: null,\r\n      material: null,\r\n      points: null,\r\n      clock: null,\r\n      stats: null,\r\n      animationId: null,\r\n    };\r\n  },\r\n  created() {},\r\n  mounted() {\r\n    this.stats = new Stats();\r\n    this.clock = new THREE.Clock();\r\n    document.body.appendChild(this.stats.domElement);\r\n    this.start();\r\n    window.addEventListener(\"resize\", this.onWindowResize);\r\n  },\r\n  beforeDestroy() {\r\n    console.log(\"销毁了three\");\r\n    cancelAnimationFrame(this.animationId);\r\n    while (this.scene.children.length > 0) {\r\n      this.scene.remove(this.scene.children[0]);\r\n    }\r\n    this.scene.traverse((object) => {\r\n      if (object.isMesh) {\r\n        object.geometry.dispose();\r\n        object.material.dispose();\r\n      }\r\n    });\r\n    this.renderer.dispose();\r\n    this.renderer.forceContextLoss();\r\n  },\r\n  activated() {\r\n    this.stats = new Stats();\r\n    this.clock = new THREE.Clock();\r\n    document.body.appendChild(this.stats.domElement);\r\n    this.start();\r\n    // onresize 事件会在窗口被调整大小时发生\r\n    window.addEventListener(\"resize\", this.onWindowResize);\r\n  },\r\n  // deactivated() {\r\n  //   console.log(\"销毁了three\");\r\n  //   cancelAnimationFrame(this.animationId);\r\n  //   while (this.scene.children.length > 0) {\r\n  //     this.scene.remove(this.scene.children[0]);\r\n  //   }\r\n  //   this.scene.traverse((object) => {\r\n  //     if (object.isMesh) {\r\n  //       object.geometry.dispose();\r\n  //       object.material.dispose();\r\n  //     }\r\n  //   });\r\n  //   this.renderer.dispose();\r\n  //   this.renderer.forceContextLoss();\r\n  // },\r\n  methods: {\r\n    onWindowResize() {\r\n      // 重置渲染器输出画布canvas尺寸\r\n      this.renderer.setSize(window.innerWidth, window.innerHeight);\r\n      // 全屏情况下：设置观察范围长宽比aspect为窗口宽高比\r\n      this.camera.aspect = window.innerWidth / window.innerHeight;\r\n      // 渲染器执行render方法的时候会读取相机对象的投影矩阵属性projectionMatrix\r\n      // 但是不会每渲染一帧，就通过相机的属性计算投影矩阵(节约计算资源)\r\n      // 如果相机的一些属性发生了变化，需要执行updateProjectionMatrix ()方法更新相机的投影矩阵\r\n      this.camera.updateProjectionMatrix();\r\n    },\r\n\r\n    toThree1() {\r\n      this.$router.push(\"/three1\");\r\n    },\r\n    shader1() {\r\n      const vertex = `precision mediump float;\r\n      uniform float uTime;\r\n  varying vec2 vUv;\r\n  attribute float aSize;\r\n  attribute vec4 aShift;\r\n  varying vec3 vColor;\r\n\r\n  const float PI = 3.141592653589793238;\r\n\r\n  void main() {\r\n    vUv = uv;\r\n    vec3 color1 = vec3(227., 155., 0.);\r\n    vec3 color2 = vec3(100., 50., 255.);\r\n    // float d = fract(length(abs(position) / vec3(40., 10., 40.))*1000.0);\r\n    float d = length(abs(position) / vec3(40., 10., 40.));\r\n    d = clamp(d, 0., 1.);\r\n    vColor = mix(color1, color2, d) / 255.0;\r\n\r\n    vec3 transformed = position;\r\n  float theta = mod(aShift.x + aShift.z * uTime, PI * 2.);\r\n  float phi = mod(aShift.y + aShift.z * uTime, PI * 2.);\r\n  transformed += vec3(sin(phi) * cos(theta), cos(phi), sin(phi) * sin(theta)) * aShift.w;\r\n\r\n\r\n    vec4 mvPosition = modelViewMatrix * vec4(transformed, 1.0);\r\n    gl_PointSize = 50.0 / -mvPosition.z*aSize;\r\n    gl_Position = projectionMatrix * mvPosition;\r\n\r\n  }`;\r\n      const fragment = `  precision mediump float;\r\n      varying vec2 vUv;\r\n  varying vec3 vColor;\r\n\r\n  void main() {\r\n  //   float mask = step(length(gl_PointCoord - 0.5),0.5);\r\n  // if(mask < 0.5) discard;\r\n  // gl_FragColor = vec4(vColor, 1.0);\r\n\r\n  float d = length(gl_PointCoord - 0.5);\r\n  if (d > 0.5) discard;\r\n  gl_FragColor = vec4(vColor, smoothstep(1.0, 0.1, d));\r\n  }`;\r\n      this.material = new THREE.ShaderMaterial({\r\n        uniforms: {\r\n          uTime: { value: 0 },\r\n        },\r\n        vertexShader: vertex,\r\n        fragmentShader: fragment,\r\n        transparent: true,\r\n        blending: THREE.AdditiveBlending,\r\n        depthTest: false,\r\n        // wireframe: true,\r\n        // wireframe: true,\r\n      });\r\n      const count1 = 50000;\r\n      const count2 = 100000;\r\n      const geometry = new THREE.BufferGeometry();\r\n      const positions = [];\r\n      const sizes = [];\r\n      const shifts = [];\r\n      for (let i = 0; i < count1 + count2; i++) {\r\n        let theta = Math.random() * Math.PI * 2;\r\n        // let phi = Math.random() * Math.PI; // 两极密集\r\n        let phi = Math.acos(Math.random() * 2 - 1); // 分布更均匀\r\n        let size = Math.random() * 1.5 + 0.5; // 0.5-2.0\r\n        let angle = (Math.random() * 0.9 + 0.1) * Math.PI * 0.1;\r\n        let strength = Math.random() * 0.9 + 0.1; // 0.1-1\r\n        shifts.push(theta, phi, angle, strength);\r\n\r\n        sizes.push(size);\r\n        if (i < count1) {\r\n          // let r = 10;\r\n          let r = Math.random() * 0.5 + 9.5;\r\n          // let x = r * Math.sin(phi) * Math.cos(theta);\r\n          // let y = r * Math.cos(phi);\r\n          // let z = r * Math.sin(phi) * Math.sin(theta);\r\n          let { x, y, z } = new THREE.Vector3()\r\n            .randomDirection()\r\n            .multiplyScalar(r);\r\n          positions.push(x, y, z);\r\n        } else {\r\n          // 圆盘/圆柱部分\r\n          let r = 10;\r\n          let R = 40;\r\n          let rand = Math.pow(Math.random(), 1.5);\r\n          let radius = Math.sqrt(R * R * rand + (1 - rand) * r * r);\r\n          let { x, y, z } = new THREE.Vector3().setFromCylindricalCoords(\r\n            radius,\r\n            Math.random() * 2 * Math.PI,\r\n            (Math.random() - 0.5) * 2\r\n          );\r\n          positions.push(x, y, z);\r\n        }\r\n      }\r\n\r\n      geometry.setAttribute(\r\n        \"position\",\r\n        new THREE.Float32BufferAttribute(positions, 3)\r\n      );\r\n      geometry.setAttribute(\r\n        \"aSize\",\r\n        new THREE.Float32BufferAttribute(sizes, 1)\r\n      );\r\n      geometry.setAttribute(\r\n        \"aShift\",\r\n        new THREE.Float32BufferAttribute(shifts, 4)\r\n      );\r\n\r\n      this.points = new THREE.Points(geometry, this.material);\r\n      this.points.rotation.order = \"ZYX\";\r\n      this.points.rotation.z = 0.2;\r\n      this.scene.add(this.points);\r\n    },\r\n    // 初始化场景\r\n    initScene() {\r\n      this.scene = new THREE.Scene();\r\n      //给场景添加烟雾效果\r\n      // 参数：烟雾颜色，烟雾范围near，烟雾范围far\r\n      this.scene.background = new THREE.Color(0x111111);\r\n      // this.scene.background = new THREE.Color(0xffffff);\r\n      this.scene.fog = new THREE.Fog(0x000000, 0, 3000);\r\n      // 给场景添加坐标轴\r\n      //   var axes = new THREE.AxesHelper(100);\r\n      //   this.scene.add(axes);\r\n    },\r\n    // 初始化渲染器\r\n    initRenderer() {\r\n      // antialias是否开启抗锯齿\r\n      const canvas = document.querySelector(\"#three\");\r\n      this.renderer = new THREE.WebGLRenderer({\r\n        canvas,\r\n        antialias: true,\r\n        alpha: true,\r\n      });\r\n      this.renderer.setPixelRatio(Math.min(window.devicePixelRatio, 2));\r\n      this.renderer.setSize(window.innerWidth, window.innerHeight);\r\n      this.renderer.setClearColor(0xeeeeee);\r\n      document.body.appendChild(this.renderer.domElement);\r\n    },\r\n    // 初始化相机\r\n    initCamera() {\r\n      this.camera = new THREE.PerspectiveCamera(\r\n        45,\r\n        window.innerWidth / window.innerHeight,\r\n        0.1,\r\n        1000\r\n      );\r\n      this.camera.position.set(30, 8, 30);\r\n    }, // 初始化控制器\r\n    initControls() {\r\n      this.controls = new OrbitControls(this.camera, this.renderer.domElement);\r\n      // 阻尼效果\r\n      this.controls.enableDamping = true;\r\n      // 摄像机自动旋转\r\n      this.controls.autoRotate = false;\r\n      // 控制垂直角度的旋转范围\r\n      // controls;\r\n\r\n      this.controls.enableZoom = false;\r\n      // to disable rotation\r\n      this.controls.enableRotate = false;\r\n      // to disable pan\r\n      this.controls.enablePan = false;\r\n    },\r\n    //初始化光源\r\n    initLight() {\r\n      const directionalLight = new THREE.DirectionalLight(0xe8eaeb, 0.2);\r\n      directionalLight.position.set(0, 10, 5);\r\n      this.scene.add(directionalLight);\r\n    },\r\n    render() {\r\n      if (!this.renderer) {\r\n        return;\r\n      }\r\n      // 触底弹跳\r\n      // circle.position.y = Math.abs(Math.sin(elapsedTime * 3));\r\n      const time = this.clock.getElapsedTime();\r\n      this.points.rotation.y = time * 0.01;\r\n      this.material.uniforms.uTime.value = time;\r\n      // mesh.rotation.y = time;\r\n      this.animationId = requestAnimationFrame(this.render);\r\n      this.renderer.render(this.scene, this.camera);\r\n      this.controls.update();\r\n      this.stats.update(); //更新性能插件\r\n    },\r\n    ownFun() {\r\n      this.shader1();\r\n    },\r\n    start() {\r\n      console.log(\"运行了start()\");\r\n      this.initRenderer();\r\n      //   // 设置 WebGL 上下文\r\n      //   let gl = this.renderer.getContext();\r\n      //   gl.pixelStorei(gl.UNPACK_FLIP_Y_WEBGL, false);\r\n      //   gl.pixelStorei(gl.UNPACK_PREMULTIPLY_ALPHA_WEBGL, false);\r\n      this.initScene();\r\n      this.initCamera();\r\n      this.initControls();\r\n      this.initLight();\r\n      this.ownFun();\r\n      this.render();\r\n    },\r\n  },\r\n};\r\n</script>\r\n      <style src=\"@/assets/style/three.css\"  scoped></style>","import mod from \"-!../../../node_modules/thread-loader/dist/cjs.js!../../../node_modules/babel-loader/lib/index.js??clonedRuleSet-40.use[1]!../../../node_modules/@vue/vue-loader-v15/lib/index.js??vue-loader-options!./index.vue?vue&type=script&lang=js\"; export default mod; export * from \"-!../../../node_modules/thread-loader/dist/cjs.js!../../../node_modules/babel-loader/lib/index.js??clonedRuleSet-40.use[1]!../../../node_modules/@vue/vue-loader-v15/lib/index.js??vue-loader-options!./index.vue?vue&type=script&lang=js\"","import { render, staticRenderFns } from \"./index.vue?vue&type=template&id=32419740&scoped=true\"\nimport script from \"./index.vue?vue&type=script&lang=js\"\nexport * from \"./index.vue?vue&type=script&lang=js\"\nimport style0 from \"@/assets/style/three.css?vue&type=style&index=0&id=32419740&prod&scoped=true&lang=css&external\"\n\n\n/* normalize component */\nimport normalizer from \"!../../../node_modules/@vue/vue-loader-v15/lib/runtime/componentNormalizer.js\"\nvar component = normalizer(\n  script,\n  render,\n  staticRenderFns,\n  false,\n  null,\n  \"32419740\",\n  null\n  \n)\n\nexport default component.exports"],"names":["render","_vm","this","_c","_self","ref","attrs","staticRenderFns","data","renderer","scene","camera","controls","v","material","points","clock","stats","animationId","created","mounted","Stats","THREE","document","body","appendChild","domElement","start","window","addEventListener","onWindowResize","beforeDestroy","console","log","cancelAnimationFrame","children","length","remove","traverse","object","isMesh","geometry","dispose","forceContextLoss","activated","methods","setSize","innerWidth","innerHeight","aspect","updateProjectionMatrix","toThree1","$router","push","shader1","vertex","fragment","uniforms","uTime","value","vertexShader","fragmentShader","transparent","blending","depthTest","count1","count2","positions","sizes","shifts","i","theta","Math","random","PI","phi","acos","size","angle","strength","r","x","y","z","randomDirection","multiplyScalar","R","rand","pow","radius","sqrt","setFromCylindricalCoords","setAttribute","rotation","order","add","initScene","background","fog","initRenderer","canvas","querySelector","antialias","alpha","setPixelRatio","min","devicePixelRatio","setClearColor","initCamera","position","set","initControls","OrbitControls","enableDamping","autoRotate","enableZoom","enableRotate","enablePan","initLight","directionalLight","time","getElapsedTime","requestAnimationFrame","update","ownFun","component"],"sourceRoot":""}