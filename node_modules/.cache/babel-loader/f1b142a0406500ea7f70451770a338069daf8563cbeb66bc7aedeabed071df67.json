{"ast":null,"code":"import originAxios from \"axios\";\nimport qs from \"qs\";\nimport store from \"../store/index\";\nexport default function axios(option) {\n  // originAxios.defaults.withCredentials = true;\n  return new Promise((resolve, reject) => {\n    // 1.创建axios的实例\n    const instance = originAxios.create({\n      baseURL: \"http://localhost:3000\",\n      //我电脑问题，你们使用改成http://127.0.0.1\n      timeout: 5000,\n      withCredentials: true\n    });\n\n    // 配置请求和响应拦截\n    instance.interceptors.request.use(config => {\n      // console.log('来到了request拦截success中');\n      // 1.当发送网络请求时, 在页面中添加一个loading组件, 作为动画\n\n      // 2.某些请求要求用户必须登录, 判断用户是否有token, 如果没有token跳转到login页面\n\n      // 3.对请求的参数进行序列化(看服务器是否需要序列化)\n      // config.data = qs.stringify(config.data)\n      // console.log(config);\n      // config.withCredentials = true;\n      config.headers = {\n        ...config.headers,\n        Authorization: store.state.token\n      };\n\n      // 4.等等\n      return config;\n    }, err => {\n      // console.log('来到了request拦截failure中');\n      return err;\n    });\n    instance.interceptors.response.use(response => {\n      // console.log('来到了response拦截success中');\n      return response.data;\n    }, err => {\n      console.log(\"来到了response拦截failure中\");\n      console.log(err);\n      if (err && err.response) {\n        switch (err.response.status) {\n          case 400:\n            err.message = \"请求错误\";\n            break;\n          case 401:\n            err.message = \"未授权的访问\";\n            break;\n        }\n      }\n      return err;\n    });\n\n    // 2.传入对象进行网络请求\n    instance(option).then(res => {\n      resolve(res);\n    }).catch(err => {\n      reject(err);\n    });\n  });\n}\n\n// import axios from \"axios\";\n// //后面的请求用request发\n// let request = axios.create({\n//   //基础设置\n//   baseURL: \"http://127.0.0.1\",\n//   timeout: 5000,\n//   responseType: \"json\",\n// });\n// //请求拦截器\n// request.interceptors.request.use((config) => {\n//   return config;\n//   //token 密钥设置\n// });\n// //响应拦截器\n// request.interceptors.response.use(\n//   (res) => {\n//     //响应统一处理\n//     return res.data;\n//   },\n//   (error) => {\n//     //响应失败\n//   }\n// );","map":{"version":3,"names":["originAxios","qs","store","axios","option","Promise","resolve","reject","instance","create","baseURL","timeout","withCredentials","interceptors","request","use","config","headers","Authorization","state","token","err","response","data","console","log","status","message","then","res","catch"],"sources":["D:/CodeAddress/前端/project-three/vue-three/src/network/axios.js"],"sourcesContent":["import originAxios from \"axios\";\r\nimport qs from \"qs\";\r\nimport store from \"../store/index\";\r\nexport default function axios(option) {\r\n  // originAxios.defaults.withCredentials = true;\r\n  return new Promise((resolve, reject) => {\r\n    // 1.创建axios的实例\r\n    const instance = originAxios.create({\r\n      baseURL: \"http://localhost:3000\", //我电脑问题，你们使用改成http://127.0.0.1\r\n      timeout: 5000,\r\n      withCredentials: true,\r\n    });\r\n\r\n    // 配置请求和响应拦截\r\n    instance.interceptors.request.use(\r\n      (config) => {\r\n        // console.log('来到了request拦截success中');\r\n        // 1.当发送网络请求时, 在页面中添加一个loading组件, 作为动画\r\n\r\n        // 2.某些请求要求用户必须登录, 判断用户是否有token, 如果没有token跳转到login页面\r\n\r\n        // 3.对请求的参数进行序列化(看服务器是否需要序列化)\r\n        // config.data = qs.stringify(config.data)\r\n        // console.log(config);\r\n        // config.withCredentials = true;\r\n        config.headers = {\r\n          ...config.headers,\r\n          Authorization: store.state.token,\r\n        };\r\n\r\n        // 4.等等\r\n        return config;\r\n      },\r\n      (err) => {\r\n        // console.log('来到了request拦截failure中');\r\n        return err;\r\n      }\r\n    );\r\n\r\n    instance.interceptors.response.use(\r\n      (response) => {\r\n        // console.log('来到了response拦截success中');\r\n        return response.data;\r\n      },\r\n      (err) => {\r\n        console.log(\"来到了response拦截failure中\");\r\n        console.log(err);\r\n        if (err && err.response) {\r\n          switch (err.response.status) {\r\n            case 400:\r\n              err.message = \"请求错误\";\r\n              break;\r\n            case 401:\r\n              err.message = \"未授权的访问\";\r\n              break;\r\n          }\r\n        }\r\n        return err;\r\n      }\r\n    );\r\n\r\n    // 2.传入对象进行网络请求\r\n    instance(option)\r\n      .then((res) => {\r\n        resolve(res);\r\n      })\r\n      .catch((err) => {\r\n        reject(err);\r\n      });\r\n  });\r\n}\r\n\r\n// import axios from \"axios\";\r\n// //后面的请求用request发\r\n// let request = axios.create({\r\n//   //基础设置\r\n//   baseURL: \"http://127.0.0.1\",\r\n//   timeout: 5000,\r\n//   responseType: \"json\",\r\n// });\r\n// //请求拦截器\r\n// request.interceptors.request.use((config) => {\r\n//   return config;\r\n//   //token 密钥设置\r\n// });\r\n// //响应拦截器\r\n// request.interceptors.response.use(\r\n//   (res) => {\r\n//     //响应统一处理\r\n//     return res.data;\r\n//   },\r\n//   (error) => {\r\n//     //响应失败\r\n//   }\r\n// );\r\n"],"mappings":"AAAA,OAAOA,WAAW,MAAM,OAAO;AAC/B,OAAOC,EAAE,MAAM,IAAI;AACnB,OAAOC,KAAK,MAAM,gBAAgB;AAClC,eAAe,SAASC,KAAKA,CAACC,MAAM,EAAE;EACpC;EACA,OAAO,IAAIC,OAAO,CAAC,CAACC,OAAO,EAAEC,MAAM,KAAK;IACtC;IACA,MAAMC,QAAQ,GAAGR,WAAW,CAACS,MAAM,CAAC;MAClCC,OAAO,EAAE,uBAAuB;MAAE;MAClCC,OAAO,EAAE,IAAI;MACbC,eAAe,EAAE;IACnB,CAAC,CAAC;;IAEF;IACAJ,QAAQ,CAACK,YAAY,CAACC,OAAO,CAACC,GAAG,CAC9BC,MAAM,IAAK;MACV;MACA;;MAEA;;MAEA;MACA;MACA;MACA;MACAA,MAAM,CAACC,OAAO,GAAG;QACf,GAAGD,MAAM,CAACC,OAAO;QACjBC,aAAa,EAAEhB,KAAK,CAACiB,KAAK,CAACC;MAC7B,CAAC;;MAED;MACA,OAAOJ,MAAM;IACf,CAAC,EACAK,GAAG,IAAK;MACP;MACA,OAAOA,GAAG;IACZ,CACF,CAAC;IAEDb,QAAQ,CAACK,YAAY,CAACS,QAAQ,CAACP,GAAG,CAC/BO,QAAQ,IAAK;MACZ;MACA,OAAOA,QAAQ,CAACC,IAAI;IACtB,CAAC,EACAF,GAAG,IAAK;MACPG,OAAO,CAACC,GAAG,CAAC,uBAAuB,CAAC;MACpCD,OAAO,CAACC,GAAG,CAACJ,GAAG,CAAC;MAChB,IAAIA,GAAG,IAAIA,GAAG,CAACC,QAAQ,EAAE;QACvB,QAAQD,GAAG,CAACC,QAAQ,CAACI,MAAM;UACzB,KAAK,GAAG;YACNL,GAAG,CAACM,OAAO,GAAG,MAAM;YACpB;UACF,KAAK,GAAG;YACNN,GAAG,CAACM,OAAO,GAAG,QAAQ;YACtB;QACJ;MACF;MACA,OAAON,GAAG;IACZ,CACF,CAAC;;IAED;IACAb,QAAQ,CAACJ,MAAM,CAAC,CACbwB,IAAI,CAAEC,GAAG,IAAK;MACbvB,OAAO,CAACuB,GAAG,CAAC;IACd,CAAC,CAAC,CACDC,KAAK,CAAET,GAAG,IAAK;MACdd,MAAM,CAACc,GAAG,CAAC;IACb,CAAC,CAAC;EACN,CAAC,CAAC;AACJ;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}